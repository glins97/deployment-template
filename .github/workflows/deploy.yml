name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - hml
          - prd

env:
  AWS_REGION: us-east-1

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prd" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=hml" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  get-infrastructure-info:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      frontend-bucket: ${{ steps.terraform.outputs.frontend_bucket_name }}
      frontend-cloudfront-id: ${{ steps.terraform.outputs.frontend_cloudfront_id }}
      backend-instance-id: ${{ steps.terraform.outputs.backend_instance_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get existing infrastructure info
        id: terraform
        working-directory: terraform
        run: |
          # Initialize Terraform to read existing state
          terraform init
          
          # Select workspace for the environment
          terraform workspace select ${{ needs.determine-environment.outputs.environment }} || echo "Workspace doesn't exist yet"
          
          # Get outputs from existing infrastructure
          echo "frontend_bucket_name=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "frontend_cloudfront_id=$(terraform output -raw frontend_cloudfront_id 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "backend_instance_id=$(terraform output -raw backend_instance_id 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

  deploy-frontend:
    needs: [determine-environment, get-infrastructure-info]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build with all environment variables
        working-directory: frontend
        run: |
          # Export all environment variables from GitHub environment
          # Filter out GitHub Actions system variables but keep everything else
          printenv | grep -v -E '^(GITHUB_|RUNNER_|CI|HOME|PATH|PWD|SHELL|USER|LANG|LC_|TERM|_)' > ../build.env
          
          # Source the environment file and build
          set -a
          source ../build.env
          set +a
          
          echo "Building with $(wc -l < ../build.env) environment variables"
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ needs.get-infrastructure-info.outputs.frontend-bucket }}/ --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ needs.get-infrastructure-info.outputs.frontend-cloudfront-id }} --paths "/*"

  deploy-backend:
    needs: [determine-environment, get-infrastructure-info]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create .env from GitHub environment
        run: |
          # Create .env file from all GitHub environment variables and secrets
          # Filter out GitHub Actions system variables but keep everything else
          printenv | grep -v -E '^(GITHUB_|RUNNER_|CI|HOME|PATH|PWD|SHELL|USER|LANG|LC_|TERM|_)' > .env
          
          echo "Generated .env file with $(wc -l < .env) environment variables"

      - name: Copy files to EC2
        run: |
          # Get EC2 instance public IP
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ needs.get-infrastructure-info.outputs.backend-instance-id }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          # Create SSH key file
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > /tmp/key.pem
          chmod 600 /tmp/key.pem
          
          # Copy application files
          scp -i /tmp/key.pem -o StrictHostKeyChecking=no -r \
            backend/ docker-compose.yml .env \
            ubuntu@$INSTANCE_IP:/opt/app/
          
          # Deploy application
          ssh -i /tmp/key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP << 'EOF'
            cd /opt/app
            
            # Stop existing services
            sudo docker-compose down || true
            
            # Remove old containers and images to free space
            sudo docker system prune -f || true
            
            # Build and start services
            sudo docker-compose up --build -d
            
            # Wait for services to be ready
            sleep 30
            
            # Check service status
            sudo docker-compose ps
            sudo docker-compose logs --tail=50
            
            # Restart nginx to ensure proper proxying
            sudo systemctl restart nginx
          EOF